<!DOCTYPE node PUBLIC "-//freedesktop//DTD D-BUS Object Introspection 1.0//EN"
"http://www.freedesktop.org/standards/dbus/1.0/introspect.dtd">
<node>

<!--
	org.sailfishos.connman.mdm.iptables:
	@short_description:  SailfishOS connman iptables API description.
	
	SailfishOS connman iptables API.
	
	The error codes are common for each method, following list presents the codes with generalized error message descriptions. These should be shown to the end-user.
	
	0: Ok
	
	1: Invalid IP
	
	2: Invalid port
	
	3: Invalid port range
	
	4: Invalid service name
	
	5: Invalid protocol
	
	6: Invalid policy
	
	7: Rule does not exist
	
	8: Cannot process request
	
	9: Cannot perform operation
	
	10: Unauthorized, please try again
	
	11: Unregister failed
	
	12: Invalid chain name given. Chain name is reserved (add) or does not exist (remove).
	
	13: Invalid table name given.
	
	14: Invalid target name given.
	
	100: Access denied
-->
<interface name="org.sailfishos.connman.mdm.iptables">

<!--
	ClearIptablesTable:
	@table: Iptables table to clear.
	@result: result code, 0 = cleared, 8 = table name was invalid, 9 = cannot make change (iptables error), 100 = access denied
	@string: result string.

Clears given table from iptables. Defaults to filter table. Currentlty only filter table is used, table parameter is ignored for now.
Sends signal FirewallCleared
-->
<method name="ClearIptablesTable">
<arg name="table" type="s" direction="in"/>
<arg name="result" type="q" direction="out"/>
<arg name="string" type="s" direction="out"/>
</method>

<!--
	ClearIptablesChains:
	@table: Iptables table to clear from used defined chains.
	@result: result code, 0 = cleared, 8 = table name was invalid, 9 = cannot make change (iptables error), 100 = access denied
	@string: result string.

Clears all custom chains from given iptables table. Defaults to filter table, table parameter is ignored now. Each chain is flushed first. If there is a reference to any of the custom chains in any other chain (bultin or custom chain) the chain is not removed as iptables prevents such operation.
-->
<method name="ClearIptablesChains">
<arg name="table" type="s" direction="in"/>
<arg name="result" type="q" direction="out"/>
<arg name="string" type="s" direction="out"/>
</method>

<!--
	GetIptablesContent:
	@table: Iptables table to get content from.
	@result: result code, 0 = Request done, 8 = table name was invalid, 9 = cannot make change (iptables error), 100 = access denied
	@string: result string.
	@chains: list of chains in the table, format: CHAIN POLICY
	@rules: list of rules in the table, format is similar to iptables-save command format

Get iptables content from given table. Defaults to filter table, table parameter is ignored now.
-->
<method name="GetIptablesContent">
<arg name="table" type="s" direction="in"/>
<arg name="result" type="q" direction="out"/>
<arg name="string" type="s" direction="out"/>
<arg name="chains" type="as" direction="out"/>
<arg name="rules" type="as" direction="out"/>
</method>

<!--
	Register:
	@result: 0 = registered, 10 = error authorizing please try again, 100 = access denied
	@string: result string.

Registers the client to listen for signals emitted by iptables api.
-->
<method name="Register">
<arg name="result" type="q" direction="out"/>
<arg name="string" type="s" direction="out"/>
</method>

<!--
	Unregister:
	@result: 0 = unregistered, 11 = unregister failed client not registered
	@string: result string

	Removes the client from signal listeners.
-->
<method name="Unregister">
<arg name="result" type="q" direction="out"/>
<arg name="string" type="s" direction="out"/>
</method>

<!--
	ChangePolicy:
	@table: iptables table to change policy
	@chain: change policy of this chain
	@policy: Policy 1 = ACCEPT or 2 = DROP
	@result: 0 = changed, 6 = invalid policy, 9 = cannot make change (iptables error), 12 = invalid chain name, 13 = invalid table name, 100 = access denied
	@string: result string.
	
	Change policy of filter table OUTPUT chain.
	
	Sends signal PolicyChanged
-->
<method name="ChangePolicy">
<arg name="table" type="s" direction="in"/>
<arg name="chain" type="s" direction="in"/>
<arg name="policy" type="q" direction="in"/>
<arg name="result" type="q" direction="out"/>
<arg name="string" type="s" direction="out"/>
</method>

<!--
	ManageChain:
	@table: iptables table where chain is managed
	@chain: Name of the chain to be managed
	@operation: 0 = add, 1 = remove, 2 = flush
	@result: 0 = changed, 6 = invalid policy, 8 = invalid operation, 9 = cannot make change (iptables error), 100 = access denied
	@string: result string.
	
	Manage chains in filter table. Custom chains can be added (ADD), removed (REMOVE) and flushed (FLUSH). Builtin chains or duplicates are not allowed (returns error code 9). When a chain is called to remove it is first flushed. If there is a reference to any of the custom chains in any other chain (bultin or custom chain) the chain is not removed as iptables prevents such operation (result 9).

Sends signal ChainChanged
-->
<method name="ManageChain">
<arg name="table" type="s" direction="in"/>
<arg name="chain" type="s" direction="in"/>
<arg name="operation" type="q" direction="in"/>
<arg name="result" type="q" direction="out"/>
<arg name="string" type="s" direction="out"/>
</method>

<!--
	RuleIp:
	@table: Add this rule to table
	@chain: Add this rule to chain in table
	@target: Target for the rule (ACCEPT, DROP, REJECT, QUEUE, RETURN or user added custom chain name as it was added - no sfos_ prefix or error is returned)
	@source_ip: Rule source IP address, added with -s to iptables. Can contain negation (!) at the beginning and a network mask at the end in dot-notation and CIDR (e.g., 192.168.0.1/24 192.168.0.1/255.255.255.0).
	@destination_ip: Rule destination IP address, added with -d to iptables. Can contain negation (!) at the beginning and a network mask at the end in dot-notation and CIDR (e.g., 192.168.0.1/24 192.168.0.1/255.255.255.0).
	@operation: 0 = add, 1 = remove
	@result: 0 = rule added, 1 = invalid IP, 7 = rule does not exist (when removing), 8 = invalid operation, 9 = cannot make change (iptables error), 12 = invalid chain name, 13 = invalid table, 14 = invalid target, 100 = access denied
	@string: result string
	
	Either or both of ip addresses must be set. Empty string = not set.
	
	Sends signal RuleChanged.
-->
<method name="RuleIp">
<arg name="table" type="s" direction="in"/>
<arg name="chain" type="s" direction="in"/>
<arg name="target" type="s" direction="in"/>
<arg name="source_ip" type="s" direction="in"/>
<arg name="destination_ip" type="s" direction="in"/>
<arg name="operation" type="q" direction="in"/>
<arg name="result" type="q" direction="out"/>
<arg name="string" type="s" direction="out"/>
</method>

<!--
	RuleIpWithPort:
	@table: Add this rule to table
	@chain: Add this rule to chain in table
	@target: Target for the rule (ACCEPT, DROP, REJECT, QUEUE, RETURN or user added custom chain name as it was added - no sfos_ prefix or error is returned)
	@source_ip: Rule source IP address, added with -s to iptables. Empty string is not processed. If empty destination_ip must be set. Can contain negation (!) at the beginning and a network mask at the end in dot-notation and CIDR (e.g., 192.168.0.1/24 192.168.0.1/255.255.255.0).
	@destination_ip: Rule destination IP address, added with -d to iptables. Empty string is not processed. If empty source_ip must be set. Can contain negation (!) at the beginning and a network mask at the end in dot-notation and CIDR (e.g., 192.168.0.1/24 192.168.0.1/255.255.255.0).
	@source_port: source port, can be 0 if destination port is set
	@destination_port: destination port, can be 0 if source port is set
	@protocol: Protocol number as in /etc/protocols, currently only tcp (6) and udp (17) are supported.
	@operation: 0 = add, 1 = remove
	@result: 0 = rule added, 1 = invalid IP, 2 = invalid port, 5 = invalid protocol, 7 = rule does not exist (when removing), 8 = invalid operation, 9 = cannot make change (iptables error), 12 = invalid chain name, 13 = invalid table, 14 = invalid target, 100 = access denied
	@string: result string
	
	Protocol can be omitted if known port is used. Protocol detection does the check for destination_port first, if a suitable protocol is found this is used. If source port is also defined the protocol check is done only if protocol for destination port (if set) was not found. The protocol of destination port, therefore, dominates over source port. If a proper protocol was defined the checks based on ports is not done.
	
	Either or both of ip addresses must be set. Empty string = not set.
	
	Sends signal RuleChanged.
-->
<method name="RuleIpWithPort">
<arg name="table" type="s" direction="in"/>
<arg name="chain" type="s" direction="in"/>
<arg name="target" type="s" direction="in"/>
<arg name="source_ip" type="s" direction="in"/>
<arg name="destination_ip" type="s" direction="in"/>
<arg name="source_port" type="q" direction="in"/>
<arg name="destination_port" type="q" direction="in"/>
<arg name="protocol" type="u" direction="in"/>
<arg name="operation" type="q" direction="in"/>
<arg name="result" type="q" direction="out"/>
<arg name="string" type="s" direction="out"/>
</method>

<!--
	RuleIpWithPortRange:
	@table: Add this rule to table
	@chain: Add this rule to chain in table
	@target: Target for the rule (ACCEPT, DROP, REJECT, QUEUE, RETURN or user added custom chain name as it was added - no sfos_ prefix or error is returned)
	@source_ip: Rule source IP address, added with -s to iptables. Can contain negation (!) at the beginning and a network mask at the end in dot-notation and CIDR (e.g., 192.168.0.1/24 192.168.0.1/255.255.255.0).
	@destination_ip: Rule destination IP address, added with -d to iptables. Can contain negation (!) at the beginning and a network mask at the end in dot-notation and CIDR (e.g., 192.168.0.1/24 192.168.0.1/255.255.255.0).
	@source_port_start: Source port range start (0 produces error unless both source ports are 0 and destination port range is set)
	@source_port_end: Source port range end (0 produces error unless both source ports are 0 and destination port range is set)
	@destination_port_start: Destination port range start (0 produces error unless both destination ports are 0 and source port range is set)
	@destination_port_end: Destination port range end (0 produces error unless both destination ports are 0 and source port range is set)
	@protocol: Protocol number as in /etc/protocols, currently only tcp (6) and udp (17) are supported.
	@operation: 0 = add, 1 = remove
	@result: 0 = rule added, 1 = invalid IP, 2 = invalid port, 3 = invalid port range, 5 = invalid protocol, 7 = rule does not exist (when removing), 8 = invalid operation, 9 = cannot make change (iptables error), 12 = invalid chain name, 13 = invalid table, 14 = invalid target, 100 = access denied
	@string: result string
	
	Either or both of ip addresses must be set. Empty string = not set.
	
	Protocol can be omitted if known port is used. Protocol detection does the check for destination_port_start first, if a suitable protocol is found this is used. If source port start is also defined the protocol check is done only if protocol for destination port start (if set) was not found. The protocol of destination_port_start, therefore, dominates over source_port_start. If a proper protocol was defined the checks based on ports is not done.
	
	If only one of the port ranges needs to be set, the other range must be both 0.
	
	Sends signal RuleChanged.
-->
<method name="RuleIpWithPortRange">
<arg name="table" type="s" direction="in"/>
<arg name="chain" type="s" direction="in"/>
<arg name="target" type="s" direction="in"/>
<arg name="source_ip" type="s" direction="in"/>
<arg name="destination_ip" type="s" direction="in"/>
<arg name="source_port_start" type="q" direction="in"/>
<arg name="source_port_end" type="q" direction="in"/>
<arg name="destination_port_start" type="q" direction="in"/>
<arg name="destination_port_end" type="q" direction="in"/>
<arg name="protocol" type="u" direction="in"/>
<arg name="operation" type="q" direction="in"/>
<arg name="result" type="q" direction="out"/>
<arg name="string" type="s" direction="out"/>
</method>

<!--
	RuleIpWithService:
	@table: Add this rule to table
	@chain: Add this rule to chain in table
	@target: Target for the rule (ACCEPT, DROP, REJECT, QUEUE, RETURN or user added custom chain name as it was added - no sfos_ prefix or error is returned)
	@source_ip: Rule source IP address, added with -s to iptables. Can contain negation (!) at the beginning and a network mask at the end in dot-notation and CIDR (e.g., 192.168.0.1/24 192.168.0.1/255.255.255.0).
	@destination_ip: Rule destination IP address, added with -d to iptables. Can contain negation (!) at the beginning and a network mask at the end in dot-notation and CIDR (e.g., 192.168.0.1/24 192.168.0.1/255.255.255.0).
	@source_service: source service name, case insensitive, port and protocol will be set if service is known using get getservbyname() (/etc/services)
	@destination_service: destination service name, case insensitive, port and protocol will be set if service is known using get getservbyname() (/etc/services)
	@protocol: Protocol number as in /etc/protocols, currently only tcp (6) and udp (17) are supported.
	@operation: 0 = add, 1 = remove
	@result: 0 = rule added, 1 = invalid IP, 4 = invalid service, 5 = invalid protocol,7 = rule does not exist (when removing), 8 = invalid operation, 9 = cannot make change (iptables error), 12 = invalid chain name, 13 = invalid table, 14 = invalid target, 100 = access denied
	@string: result string
	
	Either or both of ip addresses must be set. Empty string = not set.
	
	Either or both of services must be set. Empty string = not set.
	
	Sends signal RuleChanged.
-->
<method name="RuleIpWithService">
<arg name="table" type="s" direction="in"/>
<arg name="chain" type="s" direction="in"/>
<arg name="target" type="s" direction="in"/>
<arg name="source_ip" type="s" direction="in"/>
<arg name="destination_ip" type="s" direction="in"/>
<arg name="source_service" type="s" direction="in"/>
<arg name="destination_service" type="s" direction="in"/>
<arg name="protocol" type="u" direction="in"/>
<arg name="operation" type="q" direction="in"/>
<arg name="result" type="q" direction="out"/>
<arg name="string" type="s" direction="out"/>
</method>

<!--
	RulePort:
	@table: Add this rule to table
	@chain: Add this rule to chain in table
	@target: Target for the rule (ACCEPT, DROP, REJECT, QUEUE, RETURN or user added custom chain name as it was added - no sfos_ prefix or error is returned)
	@source_port: source port, can be 0 if destination port is set
	@destination_port: destination port, can be 0 if source port is set
	@protocol: Protocol number as in /etc/protocols, currently only tcp (6) and udp (17) are supported.
	@operation: 0 = add, 1 = remove
	@result: 0 = rule added, 2 = invalid port, 5 = invalid protocol, 7 = rule does not exist (when removing), 8 = invalid operation, 9 = cannot make change (iptables error), 12 = invalid chain name, 13 = invalid table, 14 = invalid target, 100 = access denied
	@string: result string
	
	Protocol can be omitted if known port is used. Protocol detection does the check for destination_port first, if a suitable protocol is found this is used. If source port is also defined the protocol check is done only if protocol for destination port (if set) was not found. The protocol of destination port, therefore, dominates over source port. If a proper protocol was defined the checks based on ports is not done.
	
	Either or both of the ports has to be set. Port == 0, not set.
	
	Sends signal RuleChanged.
-->
<method name="RulePort">
<arg name="table" type="s" direction="in"/>
<arg name="chain" type="s" direction="in"/>
<arg name="target" type="s" direction="in"/>
<arg name="source_port" type="q" direction="in"/>
<arg name="destination_port" type="q" direction="in"/>
<arg name="protocol" type="u" direction="in"/>
<arg name="operation" type="q" direction="in"/>
<arg name="result" type="q" direction="out"/>
<arg name="string" type="s" direction="out"/>
</method>

<!--
	RulePortRange:
	@table: Add this rule to table
	@chain: Add this rule to chain in table
	@target: Target for the rule (ACCEPT, DROP, REJECT, QUEUE, RETURN or user added custom chain name as it was added - no sfos_ prefix or error is returned)
	@source_port_start: Source port range start (0 produces error unless both source ports are 0 and destination port range is set)
	@source_port_end: Source port range end (0 produces error unless both source ports are 0 and destination port range is set)
	@destination_port_start: Destination port range start (0 produces error unless both destination ports are 0 and source port range is set)
	@destination_port_end: Destination port range end (0 produces error unless both destination ports are 0 and source port range is set)
	@protocol: Protocol number as in /etc/protocols, currently only tcp (6) and udp (17) are supported.
	@operation: 0 = add, 1 = remove
	@result: 0 = rule added, 2 = invalid port, 3 = invalid port range, 5 = invalid protocol, 7 = rule does not exist (when removing), 8 = invalid operation, 9 = cannot make change (iptables error), 12 = invalid chain name, 13 = invalid table, 14 = invalid target, 100 = access denied
	@string: result string
	
	Add iptables rule with port range. In both source and destination port ranges start &lt;= end.
	
	Protocol can be omitted if known port is used. Protocol detection does the check for destination_port_start first, if a suitable protocol is found this is used. If source port start is also defined the protocol check is done only if protocol for destination port start (if set) was not found. The protocol of destination_port_start, therefore, dominates over source_port_start. If a proper protocol was defined the checks based on ports is not done.
	
	If only one of the port ranges needs to be set, the other range must be both 0.
	
	Sends signal RuleChanged.
-->
<method name="RulePortRange">
<arg name="table" type="s" direction="in"/>
<arg name="chain" type="s" direction="in"/>
<arg name="target" type="s" direction="in"/>
<arg name="source_port_start" type="q" direction="in"/>
<arg name="source_port_end" type="q" direction="in"/>
<arg name="destination_port_start" type="q" direction="in"/>
<arg name="destination_port_end" type="q" direction="in"/>
<arg name="protocol" type="u" direction="in"/>
<arg name="operation" type="q" direction="in"/>
<arg name="result" type="q" direction="out"/>
<arg name="string" type="s" direction="out"/>
</method>

<!--
	RuleService:
	@table: Add this rule to table
	@chain: Add this rule to chain in table
	@target: Target for the rule (ACCEPT, DROP, REJECT, QUEUE, RETURN or user added custom chain name as it was added - no sfos_ prefix or error is returned)
	@destination_service: destination service name, case insensitive, port and protocol will be set if service is known using get getservbyname() (/etc/services)
	@source_service: source service name, case insensitive, port and protocol will be set if service is known using get getservbyname() (/etc/services)
	@protocol: Protocol number as in /etc/protocols, currently only tcp (6) and udp (17) are supported.
	@operation: 0 = add, 1 = remove
	@result: 0 = rule added, 4 = invalid service, 5 = invalid protocol, 7 = rule does not exist (when removing), 8 = invalid operation, 9 = cannot make change (iptables error), 12 = invalid chain name, 13 = invalid table, 14 = invalid target, 100 = access denied
	@string: result string
	
	Either or both of services must be set. Empty string = not set.
	
	Defined protocol is the primary choise for protocol in rule. If protocol is empty protocol for destination service is tried, if that is not successfull then the protocol for source service is tried.
	
	Sends signal RuleChanged.
-->
<method name="RuleService">
<arg name="table" type="s" direction="in"/>
<arg name="chain" type="s" direction="in"/>
<arg name="target" type="s" direction="in"/>
<arg name="source_service" type="s" direction="in"/>
<arg name="destination_service" type="s" direction="in"/>
<arg name="protocol" type="u" direction="in"/>
<arg name="operation" type="q" direction="in"/>
<arg name="result" type="q" direction="out"/>
<arg name="string" type="s" direction="out"/>
</method>

<!-- 
	GetVersion:
	@version: Version number of the iptables API
	
	Returns sailfish iptables API version
-->
<method name="GetVersion">
<arg name="version" type="i" direction="out"/>
</method>

<!--
	Initialize:
	
	Sent when plugin is loaded into Connection Manager to notify that iptables can be managed using this DBUS API.
-->
<signal name="Initialize"></signal>

<!--
	Shutdown:
	
	Sent when plugin is removed from Connection Manager.
-->
<signal name="Shutdown"></signal>

<!--
	IptablesTableCleared:
	@table: The table that was cleared.
	
	Sent when iptables table was cleared from rules.
-->
<signal name="IptablesTableCleared">
<arg name="table" type="s"/>
</signal>

<!--
	IptablesChainsCleared:
	@table: The table that was cleared from custom chains.
	
	Sent when iptables table was cleared from custom chains.
-->
<signal name="IptablesChainsCleared">
<arg name="table" type="s"/>
</signal>

<!--
	PolicyChanged:
	@chain: Name of the chain that was changed.
	@policy: New policy for the chain.
	
Sent when policy is changed for a chain
-->
<signal name="PolicyChanged">
<arg name="chain" type="s"/>
<arg name="policy" type="s"/>
</signal>

<!--
	RuleChanged:
	@table: Rule added to table
	@chain: Rule added to chain in table
	@target: Target for the rule (ACCEPT, DROP, REJECT, QUEUE, RETURN or user added custom chain name with sfos_ prefix
	@source_ip: Rule source IP address
	@destination_ip: Rule destination IP address
	@source_port_start: Source port range start
	@source_port_end: Source port range end
	@destination_port_start: Destination port range start
	@destination_port_end: Destination port range end
	@protocol: Protocol as string
	@operation: 0 = add, 1 = remove
	
Sent after a rule is succesfully added to or removed from iptables. Any of the string parameters can be empty "". If port is 0 then port is not added with the rule. If destination/source end port is 0 then port range is not utilized and the ports defined in destination/source start is only used.
-->
<signal name="RuleChanged">
<arg name="table" type="s"/>
<arg name="chain" type="s"/>
<arg name="target" type="s"/>
<arg name="source_ip" type="s"/>
<arg name="destination_ip" type="s"/>
<arg name="source_port_start" type="q"/>
<arg name="source_port_end" type="q"/>
<arg name="destination_port_start" type="q"/>
<arg name="destination_port_end" type="q"/>
<arg name="protocol" type="s"/>
<arg name="operation" type="q"/>
</signal>

<!--
	ChainChanged:
	@table: Affected table name
	@chain: Affected chain name
	@operation: Type of change: ADD or REMOVE
	
Sent when chain was added to or removed from a table.
-->
<signal name="ChainChanged">
<arg name="table" type="s"/>
<arg name="chain" type="s"/>
<arg name="operation" type="s"/>
</signal>


</interface>
</node>
