<!DOCTYPE node PUBLIC "-//freedesktop//DTD D-BUS Object Introspection 1.0//EN"
"http://www.freedesktop.org/standards/dbus/1.0/introspect.dtd">
<node>

<!--
	org.sailfishos.connman.mdm.iptables:
	@short_description:  SailfishOS connman iptables API description.
	
	SailfishOS connman iptables API.
	
	The error codes are common for each method, following list presents the codes with generalized error message descriptions. These should be shown to the end-user.
	
	0: Ok
	
	1: Invalid IP
	
	2: Invalid port
	
	3: Invalid port range
	
	4: Invalid service name
	
	5: Invalid protocol
	
	6: Invalid policy
	
	7: Rule does not exist
	
	8: Cannot process request
	
	9: Cannot perform operation
	
	10: Unauthorized, please try again
	
	11: Unregister failed
	
	12: Invalid chain name given. Chain name is reserved (add) or does not exist (remove).
	
	13: Access denied
-->
<interface name="org.sailfishos.connman.mdm.iptables">

<property name="Result" type="q" access="read"/>

<!--
	ClearIptablesTable:
	@table: Iptables table to clear.
	@result: result code, 0 = cleared, 8 = table name was invalid, 9 = cannot make change (iptables error), 13 = access denied
	@string: result string.

Clears given table from iptables. Defaults to filter table. Currentlty only filter table is used, table parameter is ignored for now.
Sends signal FirewallCleared
-->
<method name="ClearIptablesTable">
<arg name="table" type="s" direction="in"/>
<arg name="result" type="q" direction="out"/>
<arg name="string" type="s" direction="out"/>
</method>

<!--
	ClearIptablesChains:
	@table: Iptables table to clear from used defined chains.
	@result: result code, 0 = cleared, 8 = table name was invalid, 9 = cannot make change (iptables error), 13 = access denied
	@string: result string.

Clears all custom chains from given iptables table. Defaults to filter table, table parameter is ignored now.
-->
<method name="ClearIptablesChains">
<arg name="table" type="s" direction="in"/>
<arg name="result" type="q" direction="out"/>
<arg name="string" type="s" direction="out"/>
</method>

<!--
	GetIptablesContent:
	@table: Iptables table to get content from.
	@result: result code, 0 = Request done, 8 = table name was invalid, 9 = cannot make change (iptables error), 13 = access denied
	@string: result string.
	@chains: list of chains in the table, format: CHAIN POLICY
	@rules: list of rules in the table, format is similar to iptables-save command format

Get iptables content from given table. Defaults to filter table, table parameter is ignored now.
-->
<method name="GetIptablesContent">
<arg name="table" type="s" direction="in"/>
<arg name="result" type="q" direction="out"/>
<arg name="string" type="s" direction="out"/>
<arg name="chains" type="as" direction="out"/>
<arg name="rules" type="as" direction="out"/>
</method>

<!--
	Register:
	@result: 0 = registered, 10 = error authorizing please try again, 13 = access denied
	@string: result string.

Registers the client to listen for signals emitted by iptables api.
-->
<method name="Register">
<arg name="result" type="q" direction="out"/>
<arg name="string" type="s" direction="out"/>
</method>

<!--
	Unregister:
	@result: 0 = unregistered, 11 = unregister failed client not registered
	@string: result string

	Removes the client from signal listeners.
-->
<method name="Unregister">
<arg name="result" type="q" direction="out"/>
<arg name="string" type="s" direction="out"/>
</method>


<!--
	ChangeInputPolicy:
	@policy: Policy as string ACCEPT or DROP
	@result: 0 = changed, 6 = invalid policy, 9 = cannot make change (iptables error), 13 = access denied
	@string: result string.
	
	Change policy of filter table INPUT chain. Parameter is the same as iptables command (ACCEPT/DROP)

	Sends signal PolicyChanged
-->
<method name="ChangeInputPolicy">
<arg name="policy" type="s" direction="in"/>
<arg name="result" type="q" direction="out"/>
<arg name="string" type="s" direction="out"/>
</method>

<!--
	ChangeOutputPolicy:
	@policy: Policy as string ACCEPT or DROP
	@result: 0 = changed, 6 = invalid policy, 9 = cannot make change (iptables error), 13 = access denied
	@string: result string.
	
	Change policy of filter table OUTPUT chain. Parameter is the same as iptables command (ACCEPT/DROP)
	
	Sends signal PolicyChanged
-->
<method name="ChangeOutputPolicy">
<arg name="policy" type="s" direction="in"/>
<arg name="result" type="q" direction="out"/>
<arg name="string" type="s" direction="out"/>
</method>

<!--
	ManageChain:
	@chain: Name of the chain to be managed
	@operation: Operation type, ADD or REMOVE
	@result: 0 = changed, 6 = invalid policy, 9 = cannot make change (iptables error), 13 = access denied
	@string: result string.
	
	Manage chains in filter table. Custom chains can be added (ADD), removed (REMOVE) and flushed (FLUSH). Builtin chains or duplicates are not allowed (returns error code 9).

Sends signal ChainChanged
-->
<method name="ManageChain">
<arg name="chain" type="s" direction="in"/>
<arg name="operation" type="s" direction="in"/>
<arg name="result" type="q" direction="out"/>
<arg name="string" type="s" direction="out"/>
</method>

<!--
Following methods take following parameters as input:
 NAME		TYPE	DESCRIPTION
 ip		s		IP address or network with CIDR or dot notation (1.2.3.4/24
 					or 1.2.3.4/255.255.255.0)
 port		q		Port number as unsigned 16bit integer
 port		s		Port as string, single port or port range, separator is ":"
 service	s		Service name, case insensitive, 
 operation	s 		Perform operation add/remove, case insensitive, defaults to
 					add if empty string. Add appends the rule to iptables.
 					Remove removes the rule from iptables.
 protocol	s 		tcp/udp, case insensitive (sctp not supported by sailfishos
 					iptables yet), usually defaults to TCP as tcp protocol is
 					defined first in /etc/services. Can be empty if service/
 					port is found from /etc/services.

The methods are named with following convention:
	Permission|Direction|Parameters
	
Permission:
	Allow			Add rule to iptables with "-j ACCEPT"
	Deny			Add rule to iptables with "-j DROP"
	
Direction:
	Incoming		Add rule to chain INPUT of filter table
	Outgoing		Add rule to chain OUTPUT of filter table
	
Parameters:
	Ip			IP address as input
	With			Combine two parameters
	Port			Port parameter (integer q)
	PortRange		Port or port range as parameter (string s)
	Service			Service name as parameter
	
Each method sends signal RuleChanged if the rule was added to iptables.
-->

<!-- Add IP address or network to filter table INPUT chain as ACCEPT. -->
<method name="AllowIncomingIp">
<arg name="ip" type="s" direction="in"/>
<arg name="operation" type="s" direction="in"/>
<arg name="result" type="q" direction="out"/>
<arg name="string" type="s" direction="out"/>
</method>

<!-- Add IP address or network with port to filter table INPUT chain as ACCEPT.
Parameter protocol can be omitted if port is of some known service (/etc/services)
-->
<method name="AllowIncomingIpWithPort">
<arg name="ip" type="s" direction="in"/>
<arg name="port" type="q" direction="in"/>
<arg name="protocol" type="s" direction="in"/>
<arg name="operation" type="s" direction="in"/>
<arg name="result" type="q" direction="out"/>
<arg name="string" type="s" direction="out"/>
</method>

<!--
Add IP address or network with port range (e.g., 2000:3000,) to filter table
INPUT chain as ACCEPT.
-->
<method name="AllowIncomingIpWithPortRange">
<arg name="ip" type="s" direction="in"/>
<arg name="port" type="s" direction="in"/>
<arg name="protocol" type="s" direction="in"/>
<arg name="operation" type="s" direction="in"/>
<arg name="result" type="q" direction="out"/>
<arg name="string" type="s" direction="out"/>
</method>

<!--
Add port with address any (0.0.0.0) to filter table INPUT chain as ACCEPT.
Parameter protocol can be omitted if port is of some known service (/etc/services)
-->
<method name="AllowIncomingPort">
<arg name="port" type="q" direction="in"/>
<arg name="protocol" type="s" direction="in"/>
<arg name="operation" type="s" direction="in"/>
<arg name="result" type="q" direction="out"/>
<arg name="string" type="s" direction="out"/>
</method>

<!-- Add port range (e.g., 2000:3000) with address any (0.0.0.0) to filter table
INPUT chain as ACCEPT.
-->
<method name="AllowIncomingPortRange">
<arg name="port" type="s" direction="in"/>
<arg name="protocol" type="s" direction="in"/>
<arg name="operation" type="s" direction="in"/>
<arg name="result" type="q" direction="out"/>
<arg name="string" type="s" direction="out"/>
</method>

<!-- Add IP address or network with service by name (has to exist in 
/etc/services) to filter table INPUT chain as ACCEPT.
Parameter protocol can be omitted, if service is found.
-->
<method name="AllowIncomingIpWithService">
<arg name="ip" type="s" direction="in"/>
<arg name="service" type="s" direction="in"/>
<arg name="protocol" type="s" direction="in"/>
<arg name="operation" type="s" direction="in"/>
<arg name="result" type="q" direction="out"/>
<arg name="string" type="s" direction="out"/>
</method>

<!-- Add service by name (has to exist in /etc/services) with address any
(0.0.0.0) to filter table INPUT chain as ACCEPT.
Parameter protocol can be omitted, if service is found.
-->
<method name="AllowIncomingService">
<arg name="service" type="s" direction="in"/>
<arg name="protocol" type="s" direction="in"/>
<arg name="operation" type="s" direction="in"/>
<arg name="result" type="q" direction="out"/>
<arg name="string" type="s" direction="out"/>
</method>

<!-- Add IP address or network to filter table OUTPUT chain as ACCEPT.
-->
<method name="AllowOutgoingIp">
<arg name="ip" type="s" direction="in"/>
<arg name="operation" type="s" direction="in"/>
<arg name="result" type="q" direction="out"/>
<arg name="string" type="s" direction="out"/>
</method>

<!-- Add IP address or network with port to filter table OUTPUT chain as ACCEPT.
protocol can be omitted if port is of some known service (/etc/services)
-->
<method name="AllowOutgoingIpWithPort">
<arg name="ip" type="s" direction="in"/>
<arg name="port" type="q" direction="in"/>
<arg name="protocol" type="s" direction="in"/>
<arg name="operation" type="s" direction="in"/>
<arg name="result" type="q" direction="out"/>
<arg name="string" type="s" direction="out"/>
</method>

<!--
Add IP address or network with port range (e.g., 2000:3000,) to filter table
OUTPUT chain as ACCEPT.
-->
<method name="AllowOutgoingIpWithPortRange">
<arg name="ip" type="s" direction="in"/>
<arg name="port" type="s" direction="in"/>
<arg name="protocol" type="s" direction="in"/>
<arg name="operation" type="s" direction="in"/>
<arg name="result" type="q" direction="out"/>
<arg name="string" type="s" direction="out"/>
</method>

<!--
Add port with address any (0.0.0.0) to filter table OUTPUT chain as ACCEPT.
Parameter protocol can be omitted if port is of some known service (/etc/services)
-->
<method name="AllowOutgoingPort">
<arg name="port" type="q" direction="in"/>
<arg name="protocol" type="s" direction="in"/>
<arg name="operation" type="s" direction="in"/>
<arg name="result" type="q" direction="out"/>
<arg name="string" type="s" direction="out"/>
</method>

<!-- Add port range (e.g., 2000:3000) with address any (0.0.0.0) to filter table
OUTPUT chain as ACCEPT.
-->
<method name="AllowOutgoingPortRange">
<arg name="port" type="s" direction="in"/>
<arg name="protocol" type="s" direction="in"/>
<arg name="operation" type="s" direction="in"/>
<arg name="result" type="q" direction="out"/>
<arg name="string" type="s" direction="out"/>
</method>

<!-- Add IP address or network with service by name (has to exist in
/etc/services) to filter table OUTPUT chain as ACCEPT.
Parameter protocol can be omitted, if service is found.
-->
<method name="AllowOutgoingIpWithService">
<arg name="ip" type="s" direction="in"/>
<arg name="service" type="s" direction="in"/>
<arg name="protocol" type="s" direction="in"/>
<arg name="operation" type="s" direction="in"/>
<arg name="result" type="q" direction="out"/>
<arg name="string" type="s" direction="out"/>
</method>

<!-- Add service by name (has to exist in /etc/services) with address any
(0.0.0.0) to filter table OUTPUT chain as ACCEPT.
Parameter protocol can be omitted, if service is found.
-->
<method name="AllowOutgoingService">
<arg name="service" type="s" direction="in"/>
<arg name="protocol" type="s" direction="in"/>
<arg name="operation" type="s" direction="in"/>
<arg name="result" type="q" direction="out"/>
<arg name="string" type="s" direction="out"/>
</method>


<!-- Add IP address or network to filter table INPUT chain as DROP.
-->
<method name="DenyIncomingIp">
<arg name="ip" type="s" direction="in"/>
<arg name="operation" type="s" direction="in"/>
<arg name="result" type="q" direction="out"/>
<arg name="string" type="s" direction="out"/>
</method>

<!-- Add IP address or network with port to filter table INPUT chain as DROP.
protocol can be omitted if port is of some known service (/etc/services)
-->
<method name="DenyIncomingIpWithPort">
<arg name="ip" type="s" direction="in"/>
<arg name="port" type="q" direction="in"/>
<arg name="protocol" type="s" direction="in"/>
<arg name="operation" type="s" direction="in"/>
<arg name="result" type="q" direction="out"/>
<arg name="string" type="s" direction="out"/>
</method>

<!--
Add IP address or network with port range (e.g., 2000:3000,) to filter table INPUT chain
as DROP.
-->
<method name="DenyIncomingIpWithPortRange">
<arg name="ip" type="s" direction="in"/>
<arg name="port" type="s" direction="in"/>
<arg name="protocol" type="s" direction="in"/>
<arg name="operation" type="s" direction="in"/>
<arg name="result" type="q" direction="out"/>
<arg name="string" type="s" direction="out"/>
</method>

<!--
Add port with address any (0.0.0.0) to filter table INPUT chain as DROP.
Parameter protocol can be omitted if port is of some known service (/etc/services)
-->
<method name="DenyIncomingPort">
<arg name="port" type="q" direction="in"/>
<arg name="protocol" type="s" direction="in"/>
<arg name="operation" type="s" direction="in"/>
<arg name="result" type="q" direction="out"/>
<arg name="string" type="s" direction="out"/>
</method>

<!-- Add port range (e.g., 2000:3000) with address any (0.0.0.0) to filter table
INPUT chain as DROP.
-->
<method name="DenyIncomingPortRange">
<arg name="port" type="s" direction="in"/>
<arg name="protocol" type="s" direction="in"/>
<arg name="operation" type="s" direction="in"/>
<arg name="result" type="q" direction="out"/>
<arg name="string" type="s" direction="out"/>
</method>

<!-- Add IP address or network with service by name (has to exist in
/etc/services) to filter table INPUT chain as DROP.
Parameter protocol can be omitted, if service is found.
-->
<method name="DenyIncomingIpWithService">
<arg name="ip" type="s" direction="in"/>
<arg name="service" type="s" direction="in"/>
<arg name="protocol" type="s" direction="in"/>
<arg name="operation" type="s" direction="in"/>
<arg name="result" type="q" direction="out"/>
<arg name="string" type="s" direction="out"/>
</method>

<!-- Add service by name (has to exist in /etc/services) with address any
(0.0.0.0) to filter table INPUT chain as DROP.
Parameter protocol can be omitted, if service is found.
-->
<method name="DenyIncomingService">
<arg name="service" type="s" direction="in"/>
<arg name="protocol" type="s" direction="in"/>
<arg name="operation" type="s" direction="in"/>
<arg name="result" type="q" direction="out"/>
<arg name="string" type="s" direction="out"/>
</method>

<!-- Add IP address or network to filter table OUTPUT chain as DROP.
-->
<method name="DenyOutgoingIp">
<arg name="ip" type="s" direction="in"/>
<arg name="operation" type="s" direction="in"/>
<arg name="result" type="q" direction="out"/>
<arg name="string" type="s" direction="out"/>
</method>

<!-- Add IP address or networkwith port to filter table OUTPUT chain as DROP.
protocol can be omitted if port is of some known service (/etc/services)
-->
<method name="DenyOutgoingIpWithPort">
<arg name="ip" type="s" direction="in"/>
<arg name="port" type="q" direction="in"/>
<arg name="protocol" type="s" direction="in"/>
<arg name="operation" type="s" direction="in"/>
<arg name="result" type="q" direction="out"/>
<arg name="string" type="s" direction="out"/>
</method>

<!--
Add IP address or network with port range (e.g., 2000:3000,) to filter table OUTPUT chain 
as DROP.
-->
<method name="DenyOutgoingIpWithPortRange">
<arg name="ip" type="s" direction="in"/>
<arg name="port" type="s" direction="in"/>
<arg name="protocol" type="s" direction="in"/>
<arg name="operation" type="s" direction="in"/>
<arg name="result" type="q" direction="out"/>
<arg name="string" type="s" direction="out"/>
</method>

<!--
Add port with address any (0.0.0.0) to filter table OUTPUT chain as DROP.
Parameter protocol can be omitted if port is of some known service (/etc/services)
-->
<method name="DenyOutgoingPort">
<arg name="port" type="q" direction="in"/>
<arg name="protocol" type="s" direction="in"/>
<arg name="operation" type="s" direction="in"/>
<arg name="result" type="q" direction="out"/>
<arg name="string" type="s" direction="out"/>
</method>

<!-- Add port range (e.g., 2000:3000) with address any (0.0.0.0) to filter table
OUTPUT chain as DROP.
-->
<method name="DenyOutgoingPortRange">
<arg name="port" type="s" direction="in"/>
<arg name="protocol" type="s" direction="in"/>
<arg name="operation" type="s" direction="in"/>
<arg name="result" type="q" direction="out"/>
<arg name="string" type="s" direction="out"/>
</method>

<!-- Add IP address or network with service by name (has to exist in 
/etc/services) to filter table OUTPUT chain as DROP.
Parameter protocol can be omitted, if service is found.
-->
<method name="DenyOutgoingIpWithService">
<arg name="ip" type="s" direction="in"/>
<arg name="service" type="s" direction="in"/>
<arg name="protocol" type="s" direction="in"/>
<arg name="operation" type="s" direction="in"/>
<arg name="result" type="q" direction="out"/>
<arg name="string" type="s" direction="out"/>
</method>

<!-- Add service by name (has to exist in /etc/services) with address any
(0.0.0.0) to filter table OUTPUT chain as DROP.
Parameter protocol can be omitted, if service is found.
-->
<method name="DenyOutgoingService">
<arg name="service" type="s" direction="in"/>
<arg name="protocol" type="s" direction="in"/>
<arg name="operation" type="s" direction="in"/>
<arg name="result" type="q" direction="out"/>
<arg name="string" type="s" direction="out"/>
</method>

<!-- 
	GetVersion:
	@version: Version number of the iptables API
	
	Returns sailfish iptables API version
-->
<method name="GetVersion">
<arg name="version" type="i" direction="out"/>
</method>

<!--
	Initialize:
	
	Sent when plugin is loaded into Connection Manager to notify that iptables can be managed using this DBUS API.
-->
<signal name="Initialize"></signal>

<!--
	Shutdown:
	
	Sent when plugin is removed from Connection Manager.
-->
<signal name="Shutdown"></signal>

<!--
	IptablesTableCleared:
	@table: The table that was cleared.
	
	Sent when iptables table was cleared from rules.
-->
<signal name="IptablesTableCleared">
<arg name="table" type="s"/>
</signal>

<!--
	IptablesChainsCleared:
	@table: The table that was cleared from custom chains.
	
	Sent when iptables table was cleared from custom chains.
-->
<signal name="IptablesChainsCleared">
<arg name="table" type="s"/>
</signal>

<!--
	PolicyChanged:
	@chain: Name of the chain that was changed.
	@policy: New policy for the chain.
	
Sent when policy is changed for a chain
-->
<signal name="PolicyChanged">
<arg name="chain" type="s"/>
<arg name="policy" type="s"/>
</signal>

<!--
	RuleChanged:
	@ip: IP address in the rule, can be empty "" if no source/destination IP was defined 
	@port: Port in the rule, can be empty "" if no port was defined
	@protocol: Protocol regarding the rule, can be empty "" if no protocol is defined or required
	@operation: Type of the change: ADD or REMOVE
	
Sent after a rule is succesfully added to or removed from iptables TODO rethink content
-->
<signal name="RuleChanged">
<arg name="ip" type="s"/>
<arg name="port" type="s"/>
<arg name="protocol" type="s"/>
<arg name="operation" type="s"/>
</signal>

<!--
	ChainChanged:
	@table: Affected table name
	@chain: Affected chain name
	@operation: Type of change: ADD or REMOVE
	
Sent when chain was added to or removed from a table.
-->
<signal name="ChainChanged">
<arg name="table" type="s"/>
<arg name="chain" type="s"/>
<arg name="operation" type="s"/>
</signal>


</interface>
</node>
