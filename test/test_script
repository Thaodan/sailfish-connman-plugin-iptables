#!/bin/bash

# -t filter -L INPUT |grep ACCEPT
METHODS_INPUT_ACCEPT="
AllowIncomingIp
AllowIncomingIpWithPort
AllowIncomingIpWithPortRange
AllowIncomingPort
AllowIncomingPortRange
AllowIncomingIpWithService
AllowIncomingService
"

# -t filter -L OUTPUT |grep ACCEPT
METHODS_OUTPUT_ACCEPT="
AllowOutgoingIp
AllowOutgoingIpWithPort
AllowOutgoingIpWithPortRange
AllowOutgoingPort
AllowOutgoingPortRange
AllowOutgoingIpWithService
AllowOutgoingService"

# -t filter -L INPUT |grep DROP
METHODS_INPUT_DROP="
DenyIncomingIp
DenyIncomingIpWithPort
DenyIncomingIpWithPortRange 
DenyIncomingPort
DenyIncomingPortRange
DenyIncomingIpWithService
DenyIncomingService"

# -t filter -L OUTPUT |grep DROP
METHODS_OUTPUT_DROP="
DenyOutgoingIp
DenyOutgoingIpWithPort
DenyOutgoingIpWithPortRange
DenyOutgoingPort
DenyOutgoingPortRange
DenyOutgoingIpWithService
DenyOutgoingService"

METHODS_MISC="
ChangeInputPolicy
ChangeOutputPolicy
ClearIptablesTable"

# Inputs for the methods
METHOD_INPUTS[0]='string:192.168.10.1'
METHOD_INPUTS[1]='string:192.168.10.1 uint16:22 string:tcp'
METHOD_INPUTS[2]='string:192.168.10.1 string:80:90 string:tcp'
METHOD_INPUTS[3]='uint16:8080 string:tcp'
METHOD_INPUTS[4]='string:8088:8090 string:tcp'
METHOD_INPUTS[5]='string:192.168.10.1 string:telnet string:tcp'
METHOD_INPUTS[6]='string:telnet string:tcp'

# protocol, ip, dpt/spt:port
METHOD_VERIFY[0]='all 192.168.10.1'
METHOD_VERIFY[1]='tcp 192.168.10.1 dpt:22'
METHOD_VERIFY[2]='tcp 192.168.10.1 dpts:80:90'
METHOD_VERIFY[3]='tcp 0.0.0.0 dpt:8080'
METHOD_VERIFY[4]='tcp 0.0.0.0 dpts:8088:8090'
METHOD_VERIFY[5]='tcp 192.168.10.1 dpt:23'
METHOD_VERIFY[6]='tcp 0.0.0.0 dpt:23'

DESTINATION="net.connman"
DBUS_PATH="/org/sailfishos/connman/mdm/iptables"
METHOD_PREFIX="org.sailfishos.connman.mdm.iptables"

# $1=CHAIN $2=DROP/ACCEPT $3=proto $4=ip $5=port"
function check_change()
{	
	if [[ $(iptables -t filter -L $1 -n|grep -e "$2.*$3.*--.*$4.*$5") ]] ; then
		echo 0
	else
		echo "failure :: iptables -t filter -L $1 -n|grep -e "$2.*$3.*--.*$4.*$5" ::"
		return 1
	fi
}

# Send dbus message with dbus-send, input: $1=Methodname $2=Whole content
function send_message()
{
	RETURN=$(dbus-send --system --type=method_call --print-reply --dest="$DESTINATION" "$DBUS_PATH" "$METHOD_PREFIX.$1" ${@:3} string:$2)
	
	if [[ $RETURN && $(echo $RETURN|grep -e "uint16 0") ]] ; then
		echo 0
	else
		echo "failure processing rule "$METHOD_PREFIX.$1" ${@:3} string:$2"
		return 1
	fi
}

TESTCOUNT=1

# $1=chain $2=target $3...methods
function run_test()
{
	INDEX=0

	for METHOD in ${@:3} ; do

		echo -n "Running test $TESTCOUNT "
		PROCESSED=$(send_message $METHOD "ADD" ${METHOD_INPUTS[$INDEX]})
	
		if [[ "$PROCESSED" != "0" ]] ; then
			echo " FAILURE: $PROCESSED"
			exit 1
		fi
	
		echo -n "."
	
		CHANGE=$(check_change "$1" "$2" ${METHOD_VERIFY[$INDEX]})
	
		if [[ "$CHANGE" != "0" ]] ; then
			echo " FAILURE: $CHANGE"
			exit 1
		fi
	
		echo -n "."
	
		PROCESSED=$(send_message $METHOD "REMOVE" ${METHOD_INPUTS[$INDEX]})
	
		if [[ "$PROCESSED" != "0" ]] ; then
			echo " FAILURE: $PROCESSED"
			exit 1
		fi
	
		echo ". PASS"
	
		TESTCOUNT=$((TESTCOUNT+1))
		INDEX=$((INDEX+1))
	done
}

run_test "INPUT" "ACCEPT" $METHODS_INPUT_ACCEPT
run_test "OUTPUT" "ACCEPT" $METHODS_OUTPUT_ACCEPT
run_test "INPUT" "DROP" $METHODS_INPUT_DROP
run_test "OUTPUT" "DROP" $METHODS_OUTPUT_DROP

echo "All tests success."
exit 0

