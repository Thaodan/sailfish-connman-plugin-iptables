#!/bin/bash

IPTABLES_SAVE_FILE="/tmp/sailfish_iptables.filter.$RANDOM"
TEST_LOG_FILE="/tmp/sailfish_iptables.test.$(whoami).log"

REQUIRED_COMMANDS_BASE="dbus-send grep id"
REQUIRED_COMMANDS_PRIV="$REQUIRED_COMMANDS_BASE"
REQUIRED_COMMANDS_USER="$REQUIRED_COMMANDS_BASE"
REQUIRED_COMMANDS_ROOT="$REQUIRED_COMMANDS_BASE iptables iptables-save iptables-restore"

REQUIRED_USERS="root nemo"
REQUIRED_GROUPS="users privileged"
PRIVILEGED=0

# -t filter -L INPUT |grep ACCEPT
METHODS_INPUT_ACCEPT="
AllowIncomingIp
AllowIncomingIpWithPort
AllowIncomingIpWithPortRange
AllowIncomingPort
AllowIncomingPortRange
AllowIncomingIpWithService
AllowIncomingService
"

# -t filter -L OUTPUT |grep ACCEPT
METHODS_OUTPUT_ACCEPT="
AllowOutgoingIp
AllowOutgoingIpWithPort
AllowOutgoingIpWithPortRange
AllowOutgoingPort
AllowOutgoingPortRange
AllowOutgoingIpWithService
AllowOutgoingService"

# -t filter -L INPUT |grep DROP
METHODS_INPUT_DROP="
DenyIncomingIp
DenyIncomingIpWithPort
DenyIncomingIpWithPortRange 
DenyIncomingPort
DenyIncomingPortRange
DenyIncomingIpWithService
DenyIncomingService"

# -t filter -L OUTPUT |grep DROP
METHODS_OUTPUT_DROP="
DenyOutgoingIp
DenyOutgoingIpWithPort
DenyOutgoingIpWithPortRange
DenyOutgoingPort
DenyOutgoingPortRange
DenyOutgoingIpWithService
DenyOutgoingService"

# Inputs for the methods
METHOD_INPUTS[0]='string:192.168.10.1'
METHOD_INPUTS[1]='string:192.168.10.1 uint16:22 string:tcp'
METHOD_INPUTS[2]='string:192.168.10.1 string:80:90 string:tcp'
METHOD_INPUTS[3]='uint16:8080 string:tcp'
METHOD_INPUTS[4]='string:8088:8090 string:tcp'
METHOD_INPUTS[5]='string:192.168.10.1 string:telnet string:tcp'
METHOD_INPUTS[6]='string:telnet string:tcp'

METHOD_INPUTS_RESULT[0]='0'
METHOD_INPUTS_RESULT[1]='0'
METHOD_INPUTS_RESULT[2]='0'
METHOD_INPUTS_RESULT[3]='0'
METHOD_INPUTS_RESULT[4]='0'
METHOD_INPUTS_RESULT[5]='0'
METHOD_INPUTS_RESULT[6]='0'

CLEAR_RESULT="0"
POLICY_RESULT="0"

REGISTER_TEST_RESULT[0]='11'
REGISTER_TEST_RESULT[1]='0'
REGISTER_TEST_RESULT[2]='11'

# protocol, ip, dpt/spt:port
METHOD_VERIFY[0]='all 192.168.10.1'
METHOD_VERIFY[1]='tcp 192.168.10.1 dpt:22'
METHOD_VERIFY[2]='tcp 192.168.10.1 dpts:80:90'
METHOD_VERIFY[3]='tcp 0.0.0.0 dpt:8080'
METHOD_VERIFY[4]='tcp 0.0.0.0 dpts:8088:8090'
METHOD_VERIFY[5]='tcp 192.168.10.1 dpt:23'
METHOD_VERIFY[6]='tcp 0.0.0.0 dpt:23'

DESTINATION="net.connman"
DBUS_PATH="/org/sailfishos/connman/mdm/iptables"
METHOD_PREFIX="org.sailfishos.connman.mdm.iptables"

TESTCOUNT=0
TESTFAILED=0

function prepare_log()
{
	if [ -f $TEST_LOG_FILE ] ; then
		rm $TEST_LOG_FILE
	fi
}

function log()
{
	echo "Test $TESTCOUNT: $@" >> $TEST_LOG_FILE
}

function test_begin()
{
	TESTCOUNT=$((TESTCOUNT+1))
}

# $1=CHAIN $2=DROP/ACCEPT $3=proto $4=ip $5=port"
function check_change()
{	
	if [[ $(iptables -t filter -L $1 -n|grep -e "$2.*$3.*--.*$4.*$5") ]] ; then
		echo 0
	else
		echo "check_change() failure :: iptables -t filter -L $1 -n|grep -e $6 $2.*$3.*--.*$4.*$5 ::"
	fi
}

# $1=CHAIN $2=DROP/ACCEPT $3=proto $4=ip $5=port"
function check_removed()
{	
	if [[ ! $(iptables -t filter -L $1 -n|grep -e "$2.*$3.*--.*$4.*$5") ]] ; then
		echo 0
	else
		echo "check_removed() failure :: ! iptables -t filter -L $1 -n|grep -e "$2.*$3.*--.*$4.*$5" ::"
	fi
}

function check_policy_change()
{
	if [[ $(iptables -t filter -L $1 -n|grep -e "Chain $1 (policy $2)") ]] ; then
		echo 0
	else
		echo "check_policy_change() failure :: iptables -t filter -L $1 -n|grep -e Chain $1 (policy $2) ::"
	fi
}

# Send dbus message with dbus-send, input: $1=Methodname $2=Whole content
function send_message()
{
	LAST_PARAM=""
	
	if [ ! -z $2 ] ; then LAST_PARAM="string:$2" ; fi

	RETURN=$(dbus-send --system --type=method_call --print-reply --dest="$DESTINATION" "$DBUS_PATH" "$METHOD_PREFIX.$1" ${@:4} $LAST_PARAM 2>&1)
	
	if [[ $RETURN && $(echo $RETURN|grep -e "uint16 $3") ]] ; then
		echo 0
	else
		echo "failure processing rule $METHOD_PREFIX.$1 ${@:4} $LAST_PARAM - method returned: $RETURN"
	fi
}

# $1=chain $2=target $3...methods
function run_method_tests()
{
	INDEX=0

	for METHOD in ${@:3} ; do
	
		test_begin
		FAILED=0
		
		echo -n "Running test $TESTCOUNT "
		PROCESSED=$(send_message $METHOD "ADD" ${METHOD_INPUTS_RESULT[$INDEX]} ${METHOD_INPUTS[$INDEX]})
	
		if [[ "$PROCESSED" != "0" ]] ; then
			log "$PROCESSED"
			FAILED=1
		fi
	
		echo -n "."
	
		# Checking of change only possible for root, hence iptables command
		if [ "$(id -u)" == "0" ] ; then
			CHANGE=$(check_change "$1" "$2" ${METHOD_VERIFY[$INDEX]})
	
			if [[ "$CHANGE" != "0" ]] ; then
				log "$CHANGE"
				FAILED=1
			fi
		fi
	
		echo -n "."
	
		PROCESSED=$(send_message $METHOD "REMOVE" ${METHOD_INPUTS_RESULT[$INDEX]} ${METHOD_INPUTS[$INDEX]})
	
		if [[ "$PROCESSED" != "0" ]] ; then
			log "$PROCESSED"
			FAILED=1
		fi
		
		echo -n "."
	
		# Checking of removed only possible for root, hence iptables command
		if [ "$(id -u)" == "0" ] ; then
			CHANGE=$(check_removed "$1" "$2" ${METHOD_VERIFY[$INDEX]})
	
			if [[ "$CHANGE" != "0" ]] ; then
				log "$CHANGE"
				FAILED=1
			fi
		fi
	
		echo -n ". "
		
		if [ $FAILED -eq 0 ] ; then
			echo "PASS"
		else
			TESTFAILED=$((TESTFAILED+1))
			echo "FAILED"
		fi
	
		INDEX=$((INDEX+1))
	done
}

function run_policy_test()
{
	FAILED=0
	
	test_begin
	
	echo -n "Running test $TESTCOUNT ."
	
	PROCESSED=$(send_message $1 $3 $POLICY_RESULT)
	
	echo -n "."
	
	if [[ "$PROCESSED" != "0" ]] ; then
		log "$PROCESSED"
		FAILED=1
	fi
	
	echo -n "."
	
	# Checking of policy change only possible for root, hence iptables command
	if [ "$(id -u)" == "0" ] ; then
		CHANGE=$(check_policy_change $2 $3)
	
		if [[ "$CHANGE" != "0" ]] ; then
			log "$CHANGE"
			FAILED=1
		fi
	fi
	
	echo -n ". "
	
	if [ $FAILED -eq 0 ] ; then
		echo "PASS"
	else
		TESTFAILED=$((TESTFAILED+1))
		echo "FAILED"
	fi
}

function run_clear_test()
{
	test_begin
	
	echo -n "Running test $TESTCOUNT ."
	
	CLEARED=$(send_message "ClearIptablesTable" "filter" $CLEAR_RESULT)
	
	echo -n "... "
	
	if [[ "$CLEARED" != "0" ]] ; then
		log "$CLEARED"
		TESTFAILED=$((TESTFAILED+1))
		echo "FAILED"
	else
		echo "PASS"
	fi
}

function run_register_tests()
{
	# 1. unregister, 11 for all
	# 2. register, 0 for root, privileged, 12 for nemo
	# 3. unregister, 11 for all since dbus-send quits after send
	
	MESSAGES="Unregister Register Unregister"
	INDEX=0
	
	for MSG in $MESSAGES ; do
		test_begin
		echo -n "Running test $TESTCOUNT ."
	
		STATUS=$(send_message $MSG "" ${REGISTER_TEST_RESULT[$INDEX]})
		
		echo -n "... "
	
		if [[ "$STATUS" != "0" ]] ; then
			log "$STATUS"
			TESTFAILED=$((TESTFAILED+1))
			echo "FAILED"
		else
			echo "PASS"
		fi
		INDEX=$((INDEX+1))
	done
}

function run_tests()
{
	USER=$(whoami)
	case $USER in
		"nemo" | "sailfish_mdm")
			run_clear_test
			;;
	esac
	
	run_method_tests "INPUT" "ACCEPT" $METHODS_INPUT_ACCEPT
	run_method_tests "OUTPUT" "ACCEPT" $METHODS_OUTPUT_ACCEPT
	run_method_tests "INPUT" "DROP" $METHODS_INPUT_DROP
	run_method_tests "OUTPUT" "DROP" $METHODS_OUTPUT_DROP
	
	run_policy_test "ChangeInputPolicy" "INPUT" "DROP" 
	run_policy_test "ChangeInputPolicy" "INPUT" "ACCEPT"
	
	run_policy_test "ChangeOutputPolicy" "OUTPUT" "DROP" 
	run_policy_test "ChangeOutputPolicy" "OUTPUT" "ACCEPT" 
	
	run_register_tests
}

function run_command_checks()
{
	if [ "$(id -u)" == "0" ] ; then
		for command in $REQUIRED_COMMANDS_ROOT ; do
			if [[ ! $(which $command 2>/dev/null) ]] ; then
				echo "Command \"$command\" is not found. Tests cannot be run."
				exit 1
			fi
		done
	else # For now user and privileged has same cmd requirements
		for command in $REQUIRED_COMMANDS_PRIV ; do
			if [[ ! $(which $command 2>/dev/null) ]] ; then
				echo "Command \"$command\" is not found. Tests cannot be run."
				exit 1
			fi
		done
	fi
}

function run_pre_test_operations()
{
	if [ "$(id -u)" == "0" ] ; then
		echo "Saving current iptables filter table to $IPTABLES_SAVE_FILE"
		iptables-save --table=filter > $IPTABLES_SAVE_FILE
	
		CLEARED=$(send_message "ClearIptablesTable" "filter" $CLEAR_RESULT)
	
		if [[ "$CLEARED" != "0" ]] ; then
			echo "Cannot clear iptables filter table. Test may report invalid results."
		fi
	fi
}

function run_post_test_operations() 
{
	if [ "$(id -u)" == "0" ] ; then
		CLEARED=$(send_message "ClearIptablesTable" "filter" $CLEAR_RESULT)
	
		if [[ "$CLEARED" != "0" ]] ; then
			echo "Cannot clear iptables filter table."
		fi
		echo "Restoring iptables filter table from $IPTABLES_SAVE_FILE"
		iptables-restore --table=filter < $IPTABLES_SAVE_FILE
		rm -v $IPTABLES_SAVE_FILE
	fi
}

function run_user_checks()
{
	for USER in $REQUIRED_USERS ; do
		if [[ ! $(id -u $USER 2>/dev/null) ]] ; then
			echo "User \"$USER\" does not exist in the system, test cannot be run."
			exit 1
		fi
	done
	
	for GROUP in $REQUIRED_GROUPS ; do
		if [[ ! $(grep /etc/group -e $GROUP) ]] ; then 
			echo "Group \"$GROUP\" does not exist in the system, test cannot be run."
			exit 1
		fi
	done
	
	if [[ $(groups|grep privileged) ]] ; then
		PRIVILEGED=1
	fi
}

function set_expected_result()
{
	USER=$(whoami)
	case $USER in
		"root")
			;;
		"nemo" | "sailfish-mdm")
			CLEAR_RESULT="12"
			if [[ $PRIVILEGED -eq 0 ]] ; then
				METHOD_INPUTS_RESULT[0]='12'
				METHOD_INPUTS_RESULT[1]='12'
				METHOD_INPUTS_RESULT[2]='12'
				METHOD_INPUTS_RESULT[3]='12'
				METHOD_INPUTS_RESULT[4]='12'
				METHOD_INPUTS_RESULT[5]='12'
				METHOD_INPUTS_RESULT[6]='12'
				POLICY_RESULT="12"
				REGISTER_TEST_RESULT[0]='11'
				REGISTER_TEST_RESULT[1]='12'
				REGISTER_TEST_RESULT[2]='11'
			fi
			;;
		*)
			echo "User $USER not recognized, default settings are used."
			;;
	esac
}

function main()
{
	run_user_checks # for all users
	run_command_checks # for each user
	
	if [[ $PRIVILEGED -eq 1 ]] ; then
		echo "Running tests with privileged group permissions"
	else
		echo "Running tests as $(whoami)"
	fi
	
	run_pre_test_operations # only with root

	prepare_log # for each user
	
	set_expected_result

	run_tests # for each user
	
	run_post_test_operations #only with root
	
	if [ $TESTFAILED -eq 0 ] ; then
		echo "All tests complete."
		exit 0
	else
		echo "$TESTFAILED/$TESTCOUNT tests failed for user $(whoami)."
		echo "Error logs can be found at $TEST_LOG_FILE"
		exit 1
	fi
}

main
